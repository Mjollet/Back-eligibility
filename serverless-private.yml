service: sams-eligibility

custom:
  default:
    stage: "develop"
    env: "{{env}}"
    region: "{{ec2_region}}"
    logLevel:
      develop: INFO
      production: INFO
  table:
    dictionary: Dictionary
    rules: Rules
  bucket:
    schemas:
      eligibility: "{{env}}-schemas-eligibility"
  scripts:
    hooks:
      'deploy:finalize': "aws s3 cp ./lib/schemas s3://${self:custom.bucket.schemas.eligibility}/ --recursive" 
  warmup:
    default: true  #set the default configuration for all the functions
    folderName: "_warmup" # Name of the folder created for the generated warmup  
    cleanFolder: false
    memorySize: 128
    name: "{{env}}-make-eligibility-pop"
    role: "arn:aws:iam::{{aws_account_id}}:role/{{env}}-role-lambda"
    schedule: "cron(0/10 0-23 ? * MON-SUN *)" # Run WarmUP every 10 minutes Mon-Sun between 00:00am and 23:55pm (UTC) 
    timeout: 20
    prewarm: true # Run WarmUp immediately after a deployment
    vpc:
      securityGroupIds: [{{sggroup_list_id}}]
      subnetIds: [{{subnet_list_id}}]
  resourcePolicy:
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource:
        - execute-api:*
      Condition:
        StringEquals:
          aws:sourceVpc: "{{vpcid}}"

package:
    individually: true
    
provider:
  name: aws
  runtime: nodejs8.10
  role: "arn:aws:iam::{{aws_account_id}}:role/{{env}}-role-lambda"
  stage: ${opt:stage, self:custom.default.stage}
  region: ${self:custom.default.region}
  endpointType: private
  aws_account_id: "{{aws_account_id}}"
  vpc:
    securityGroupIds: [{{sggroup_list_id}}]
    subnetIds: [{{subnet_list_id}}]
  resourcePolicy:
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource: "arn:aws:execute-api:eu-west-1:{{aws_account_id}}:*/*"
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, self:custom.default.stage}
    REGION: ${self:custom.default.region}
    AWS_ENV: "{{env}}"
    # DYNAMODB
    AWS_DYNAMODB_REGION: ${self:custom.default.region}
    AWS_DYNAMODB_ENDPOINT: ${opt:dynamodbEndpoint, "dynamodb.eu-west-1.amazonaws.com"}
    DICTIONARY_TABLE_NAME: "{{env}}-${self:custom.table.dictionary}"
    RULES_TABLE_NAME: "{{env}}-${self:custom.table.rules}"
    # TAGS
    AWS_ELIGIBILITY_TAG: "{{env}}/eligibility/eligibility"
    AWS_MUSE_TAG: "{{env}}/eligibility/muse"
    # SECRETS MANAGER
    SECRET_MANAGER_ENDPOINT: "https://secretsmanager.${self:custom.default.region}.amazonaws.com"
    S3_ELIGIBILITY_SCHEMA_BUCKET_NAME: ${self:custom.bucket.schemas.eligibility}

plugins:
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-plugin-scripts
  - serverless-plugin-optimize

functions:
  - ${file(./serverless-config/functions/private-functions.yml)}
  - ${file(./serverless-config/functions/2wayauth-private-functions.yml)}

resources:
  - ${file(./serverless-config/resources/dynamodb-tables.yml)}
  - ${file(./serverless-config/resources/s3-bucket.yml)}